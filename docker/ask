#!/usr/bin/env python3
# -*- coding:utf8 -*-
import sys
from question.wh_question import WhQuestion
from question.yes_no_question import YesNoQuestion
from processor.stanza_process import StanzaProcessor
from string import punctuation
import spacy

class Ask:
    def __init__(self, article, n):
        self.n = n
        self.questions = []
        article = open(article).read()
        article = self.pronoun_coref(article)
        stanza = StanzaProcessor(sentence=article).process()
        self.source = stanza

    # https://stackoverflow.com/questions/64284835/replace-personal-pronoun-with-previous-person-mentioned-noisy-coref
    def pronoun_coref(self, text):
        nlp = spacy.load('en_core_web_sm')
        doc = nlp(text)
        pronouns = [(tok, tok.i) for tok in doc if (tok.tag_ == "PRP")]
        names = [(ent.text, ent[0].i) for ent in doc.ents if ent.label_ == 'PERSON']
        doc = [tok.text_with_ws for tok in doc]
        for p in pronouns:
            replace = max(filter(lambda x: x[1] < p[1], names),
                        key=lambda x: x[1], default=False)
            if replace:
                replace = replace[0]
                if doc[p[1] - 1] in punctuation:
                    replace = ' ' + replace
                if doc[p[1] + 1] not in punctuation:
                    replace = replace + ' '
                doc[p[1]] = replace
        doc = ''.join(doc)
        return doc
    
    def generate(self):
        yesno = YesNoQuestion(self.source, self.n)
        yesno.ask()
        self.questions.extend(yesno.questions)

        wh = WhQuestion(self.source, self.n)
        wh.ask()
        self.questions.extend(wh.questions)

        self.rank_and_print_questions()
    
    def rank_and_print_questions(self):
        # TODO: rank questions before printing
        for i in range(0, self.n):
            if i >= len(self.questions):
                print("No more question")
            else:
                print(self.questions[i])
    
if __name__ == '__main__':
    article = sys.argv[1]
    n = int(sys.argv[2])
    ask = Ask(article, n)
    ask.generate()